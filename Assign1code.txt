/***************************************************************** 
This program demonstrates a simple "Line" class. Here, a Line class
 is defined with its properties and interface (i.e., its methods). 
A main method (in TestLine) then creates instances of this Line
 class and calls on the methods to demonstrate its behavior. 
*****************************************************************/
import java.io.*; 
public class Line
{

private int x1, y1, x2, y2; //coordinates of the line 
//Constructor 
//Receives 4 integers which are the Line's start and end points. 
public Line(int xOne, int yOne, int xTwo, int yTwo) 
{ 
// each of these validates its argument - see below. 
setXOne(xOne); 
setYOne(yOne); 
setXTwo(xTwo); 
setYTwo(yTwo);
} // end constructor
 
//method draw() calls another method called drawLine(), 
//which is assumed to be a graphics primitive on the 
//system. However, since this program will be 
//run in console mode, a text description of the Line 
//will be displayed. // 
public void draw() 
{ 
drawLine(x1, y1, x2, y2);
}

//method drawLine() simulates drawing of a line for console mode. 
//It should describe all the important attributes of the line. 
//In a graphics mode program, we would delete this and use the 
//system's Graphics library drawLine(). // 
private void drawLine(int x1, int y1, int x2, int y2) 
{ 
System.out.println("Draw a line from x of " + x1 + " and y of " + y1); 
System.out.println("to x of " + x2 + " and y of " + y2 + "\n");
} 
                  
//Method setLine() allows user to change the points of the 
//already existing Line. 
public void setLine(int xOne, int yOne, int xTwo, int yTwo) 
{ 
  setXOne(xOne);
  setYOne(yOne);
  setXTwo(xTwo);
  setYTwo(yTwo);
} 
// -- the individual setXXXX methods that prevent 
//  any line's coordinate from being offscreen.  
//  In the event of an invalid (offscreen) value,  
//  that value is (silently) set to 0. 
public void setXOne(int xOne)
{
if (xOne < 0 || xOne > 639)
x1 = 0;
else
x1 = xOne;
} 
public void setYOne(int yOne) 
{    
if (yOne < 0 || yOne > 479)
y1 = 0;
else
y1 = yOne;
} 
public void setXTwo(int xTwo) 
{    
if (xTwo > 639 || xTwo < 0)
x2 = 0;
else
x2 = xTwo;
} 
public void setYTwo(int yTwo) 
{    
if (yTwo > 479 || yTwo < 0)
y2 = 0;
else
y2 = yTwo;
} 
//Now for some "get" Access methods to get individual values 
public int getXOne() 
{  return x1; 
}  
public int getYOne() 
{  
return y1; 
}  
public int getXTwo()
{
return x2; 
} 
public int getYTwo() 
{ 
return y2; 
}
 
} // end class Line

/*************************************************************** 
Now we will define a driver program below called TestLine with 
main() where execution will begin. It is this class, and this code,
 that will create instances of the Line and call its methods. As a 
test module, this code would be improved with additional 
System.out.println() statements that explain what is being attempted
 and what the results should be, for example: "About to change l1 to
 an invalid value and then redraw it. Line position 
should not change: "*/
//********************************************************* 
class TestLine 
{ 

public static void main(String args[]) 
{ 
Line l1 = null, l2 = null; 
//declare 2 instances of Line class 
//create 1 Line object 
l1 = new Line (10, 10, 100, 100); 
//draw it 
l1.draw(); 
//change start point with valid values 
l1.setLine(5, 5, l1.getXTwo(), l1.getYTwo()); 
//draw it again with new start point 
l1.draw(); 
//try to change xOne (x1) to an illegal value 
l1.setXOne(3000); 
//draw the line...x1 should now be zero 
l1.draw(); 
//create a second Line instance, or object 
l2 = new Line(100, 100, 400, 400); 
//draw 2nd line 
l2.draw(); 
//set a new valid yTwo for line 2 
l2.setYTwo(479); 
//draw 2nd line again 
l2.draw(); 
} // end of main

}  // end class TestLine
